#!/usr/bin/env node

/**
 * Generate final analysis report
 * Node.js replacement for generate-report.sh
 */

const fs = require('fs');
const path = require('path');

console.log('🐕 Generating final analysis report...');

// Get environment variables with defaults
const env = {
  severity: process.env.SEVERITY || 'unknown',
  actionTaken: process.env.ACTION_TAKEN || 'none',
  issueNumber: process.env.ISSUE_NUMBER || '',
  prNumber: process.env.PR_NUMBER || '',
  testsPassing: process.env.TESTS_PASSING || 'unknown',
  githubWorkflow: process.env.GITHUB_WORKFLOW || 'unknown',
  githubRunId: process.env.GITHUB_RUN_ID || 'unknown',
  githubServerUrl: process.env.GITHUB_SERVER_URL || 'unknown',
  githubRepository: process.env.GITHUB_REPOSITORY || 'unknown',
  inputTokens: process.env.INPUT_TOKENS || 'N/A',
  outputTokens: process.env.OUTPUT_TOKENS || 'N/A',
  cacheReadTokens: process.env.CACHE_READ_TOKENS || 'N/A',
  cacheWriteTokens: process.env.CACHE_WRITE_TOKENS || 'N/A',
  totalCost: process.env.TOTAL_COST || 'N/A',
  turnsUsed: process.env.TURNS_USED || 'N/A',
  createFixes: process.env.CREATE_FIXES || 'false',
  rerunTests: process.env.RERUN_TESTS || 'false'
};

// Check if analysis failed
const analysisFailed = !env.severity || env.severity === '' || env.severity === 'unknown';
if (analysisFailed) {
  console.log('⚠️ Claude analysis may have failed - using fallback values');
  env.severity = 'unknown';
  env.actionTaken = 'analysis_failed';
}

// Helper function to safely read JSON file
function readJsonFile(fileName) {
  try {
    const filePath = path.join('.watchdog', fileName);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(content);
    }
  } catch (error) {
    console.warn(`Warning: Could not read ${fileName}:`, error.message);
  }
  return null;
}

// Helper function to convert object to markdown list
function objectToMarkdownList(obj, prefix = '') {
  if (!obj) return 'No data available';
  
  return Object.entries(obj)
    .map(([key, value]) => {
      const formattedKey = key.replace(/_/g, ' ').toUpperCase();
      return `- **${formattedKey}:** ${value}`;
    })
    .join('\n');
}

// Generate report content
const timestamp = new Date().toISOString();
const runUrl = `${env.githubServerUrl}/${env.githubRepository}/actions/runs/${env.githubRunId}`;

let reportContent = `# 🐕 Claude Code Watchdog Analysis Report

**Workflow:** ${env.githubWorkflow}
**Run:** [${env.githubRunId}](${runUrl})
**Timestamp:** ${timestamp}

## Analysis Results
- **Severity:** ${env.severity}
- **Action Taken:** ${env.actionTaken}
- **Issue Number:** ${env.issueNumber || 'N/A'}
- **PR Number:** ${env.prNumber || 'N/A'}
- **Tests Passing:** ${env.testsPassing}`;

if (analysisFailed) {
  reportContent += '\n- **Status:** ⚠️ Analysis encountered errors - results may be incomplete';
}

// Add context summary
reportContent += '\n\n## Context Summary\n';
const contextSummary = readJsonFile('context-summary.json');
reportContent += objectToMarkdownList(contextSummary);

// Add failure analysis
reportContent += '\n\n## Failure Analysis\n';
const failureAnalysis = readJsonFile('failure-analysis.json');
reportContent += objectToMarkdownList(failureAnalysis);

// Add artifacts info
reportContent += '\n\n## Available Artifacts\n';
reportContent += '- Context data: `.watchdog/` directory\n';

// Count test files
let testFileCount = 0;
try {
  const testFilesPath = path.join('.watchdog', 'test-files.txt');
  if (fs.existsSync(testFilesPath)) {
    const content = fs.readFileSync(testFilesPath, 'utf8');
    testFileCount = content.split('\n').filter(line => line.trim()).length;
  }
} catch (error) {
  // Ignore error
}
reportContent += `- Test files: ${testFileCount} files found\n`;

// Count recent runs
const recentRuns = readJsonFile('recent-runs.json');
const runCount = Array.isArray(recentRuns) ? recentRuns.length : 0;
reportContent += `- Recent runs: ${runCount} runs analyzed\n`;

// Add cost information
reportContent += '\n\n## 💰 Actual Cost\n';
reportContent += `- **Input tokens:** ${env.inputTokens}\n`;
reportContent += `- **Output tokens:** ${env.outputTokens}\n`;
reportContent += `- **Cache read:** ${env.cacheReadTokens}\n`;
reportContent += `- **Cache write:** ${env.cacheWriteTokens}\n`;
reportContent += `- **Total cost:** ${env.totalCost}\n`;
reportContent += `- **Turns used:** ${env.turnsUsed}\n`;
reportContent += `- **Configuration:** create_fixes=${env.createFixes}, rerun_tests=${env.rerunTests}\n`;

// Add footer
reportContent += '\n---\n*Generated by Claude Code Watchdog v0.2*\n';

// Write report file
try {
  const reportPath = path.join('.watchdog', 'final-report.md');
  fs.writeFileSync(reportPath, reportContent);
  console.log('✅ Report written to .watchdog/final-report.md');
} catch (error) {
  console.error('❌ Failed to write report:', error.message);
  process.exit(1);
}

// Console summary
console.log('📊 Analysis Summary:');
console.log(`   - Severity: ${env.severity}`);
console.log(`   - Action taken: ${env.actionTaken}`);

if (env.issueNumber && env.issueNumber !== '') {
  console.log(`   - Issue: #${env.issueNumber}`);
}

if (env.prNumber && env.prNumber !== '') {
  console.log(`   - PR: #${env.prNumber}`);
}

if (env.testsPassing === 'true') {
  console.log('   - ✅ Tests now passing after fixes!');
} else if (env.testsPassing === 'false') {
  console.log('   - ❌ Tests still failing after attempted fixes');
}

console.log('🐕 Analysis complete! Report saved to artifacts.');
console.log('');

// Cost summary
if (env.totalCost && env.totalCost !== 'N/A') {
  console.log(`💰 Actual cost: ${env.totalCost} USD`);
  console.log(`📊 Tokens: ${env.inputTokens}in/${env.outputTokens}out`);
} else {
  console.log('💰 Estimated cost: ~$0.30-$0.80 USD (varies by complexity)');
}

console.log('📋 See full breakdown in analysis report artifact');